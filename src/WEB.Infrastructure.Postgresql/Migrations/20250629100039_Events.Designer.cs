// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WEB.Infrastructure.Postgresql;

#nullable disable

namespace WEB.Infrastructure.Postgresql.Migrations
{
    [DbContext(typeof(EFCoreServiceDbContext))]
    [Migration("20250629100039_Events")]
    partial class Events
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WEB.Domain.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_event");

                    b.HasIndex("VenueId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("WEB.Domain.Events.EventDetails", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EventId")
                        .HasName("pk_event_details");

                    b.ToTable("events_details", (string)null);
                });

            modelBuilder.Entity("WEB.Domain.Reservation.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("WEB.Domain.Reservation.ReservationSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_reservation_seat");

                    b.HasIndex("ReservationId");

                    b.ToTable("reservation_seat", (string)null);
                });

            modelBuilder.Entity("WEB.Domain.Venue.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("RowNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_seats");

                    b.HasIndex("VenueId");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("WEB.Domain.Venue.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("SeatsLimit")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "WEB.Domain.Venue.Venue.Name#VenueName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("name");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("prefix");
                        });

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.ToTable("venues", (string)null);
                });

            modelBuilder.Entity("WEB.Domain.Events.Event", b =>
                {
                    b.HasOne("WEB.Domain.Venue.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WEB.Domain.Events.EventDetails", b =>
                {
                    b.HasOne("WEB.Domain.Events.Event", null)
                        .WithOne("Details")
                        .HasForeignKey("WEB.Domain.Events.EventDetails", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WEB.Domain.Reservation.ReservationSeat", b =>
                {
                    b.HasOne("WEB.Domain.Reservation.Reservation", "Reservation")
                        .WithMany("Seats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("WEB.Domain.Venue.Seat", b =>
                {
                    b.HasOne("WEB.Domain.Venue.Venue", null)
                        .WithMany("Seats")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WEB.Domain.Events.Event", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("WEB.Domain.Reservation.Reservation", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("WEB.Domain.Venue.Venue", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
